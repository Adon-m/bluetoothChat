package com.example.bluetoothserver;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.UUID;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothServerSocket;
import android.bluetooth.BluetoothSocket;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.TextView;
import android.widget.Toast;


public class MainActivity extends Activity {
	public static final String NAME = "UBCOM_BLUETOOTH_SERVER";
	private static final int REQUEST_ENABLE_BT = 0;
	Menu mArrayAdapter = null;
	 final UUID MY_UUID = UUID.fromString("d1740d40-af75-45e7-8424-0aa52c31ec45");
	public BluetoothAdapter mBluetoothAdapter;
	
	int x=0/0;
	
	TextView text;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        if (mBluetoothAdapter == null) {
            Toast toast=Toast.makeText(this, "no bluetooth support", Toast.LENGTH_LONG);
            toast.show();
        }
        if (!mBluetoothAdapter.isEnabled()) {
            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
        }
        text= (TextView)findViewById(R.id.recievedText);
        serverSocketSetup();
        Handler handler = new Handler(){
    		@Override
    		  public void handleMessage(Message msg) {
    			Bundle bundle = msg.getData();
    			String info = bundle.getString("Data");
    			  text.setText( info);
    			  
    		}
    	};
    }
     
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
       
        		
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
    
   public void serverSocketSetup(){
	  // int c=0/0;
	   if(BluetoothAdapter.getDefaultAdapter().isEnabled()==true){
		   AcceptThread accept = new AcceptThread();
		   accept.start();
	   }
	   else{ Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
	    startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
	   }
   }
 
   
   
   
   
   class AcceptThread extends Thread {
	    private final BluetoothServerSocket mmServerSocket;
	 
	    public AcceptThread() {
	        // Use a temporary object that is later assigned to mmServerSocket,
	        // because mmServerSocket is final
	        BluetoothServerSocket tmp = null;
	        
	        try {
	            // MY_UUID is the app's UUID string, also used by the client code
	        	Log.d("Start", " starting to listen");
	            tmp = mBluetoothAdapter.listenUsingRfcommWithServiceRecord(NAME, MY_UUID);
	            Log.d("Finish", " starting to listen");
	        } catch (IOException e) {
	        	Log.d("AcceptThread", "get rfcom channel failed");
	        	
	        }

	        mmServerSocket = tmp;
	    }
	 
	    public void run() {
	        BluetoothSocket socket = null;
	        // Keep listening until exception occurs or a socket is returned
	        while (true) {
	            try {
	            	Log.d("run", "Running run");
	                socket = mmServerSocket.accept();
	                Log.d("Socket", "SOcket:"+socket.toString());
	                
	            } catch (IOException e) {
	            	Log.d("ACCept", "socket failed to initialize accept");
	                break;
	            }
	            // If a connection was accepted
	            if (socket != null) {
	                // Do work to manage the connection (in a separate thread)
	                manageConnectedSocket(socket);
	               /*try {
						mmServerSocket.close();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						Log.d("Close", "socket failed to close accept");
						e.printStackTrace();
					}
	                break;*/
	            }
	        }
	    }
	 
	    /** Will cancel the listening socket, and cause the thread to finish */
	    public void cancel() {
	        try {
	            mmServerSocket.close();
	        } catch (IOException e) { }
	    }
	}
   
   public void manageConnectedSocket(BluetoothSocket socket){
	   ConnectedThread connect = new ConnectedThread(socket);
	  connect.start();
	 
	
	
	 
	
	   
   }
   
	    class ConnectedThread extends Thread {
		    private static final int MESSAGE_READ = 1;
			private final BluetoothSocket mmSocket;
		    private InputStream mmInStream;
		    private OutputStream mmOutStream;
		    Handler mHandler = new Handler(Looper.getMainLooper());
		    boolean isDone=false;
		 
		    public ConnectedThread(BluetoothSocket socket) {
		        mmSocket = socket;
		        InputStream tmpIn = null;
		        OutputStream tmpOut = null;
		 
		        // Get the input and output streams, using temp objects because
		        // member streams are final
		        try {
		            tmpIn = mmSocket.getInputStream();
		            tmpOut = mmSocket.getOutputStream();
		        } catch (IOException e) { }
		 
		        mmInStream = tmpIn;
		        mmOutStream = tmpOut;
		        
		       
		    }
		 
		    public void run() {
		    	
		        while (true) {
		    	Log.d("repeat", "repeat");
		    	 
			        
		        byte[] buffer = new byte[1024];  // buffer store for the stream
		        int bytes; // bytes returned from read()
		        boolean complete=false;
		 
		        // Keep listening to the InputStream until an exception occurs
		  
		            try {
		                // Read from the InputStream
		                bytes = mmInStream.read(buffer);
		                // Send the obtained bytes to the UI activity
		              //  mHandler.obtainMessage(MESSAGE_READ, bytes, -1, buffer)
		                //        .sendToTarget();
		                String t = new String(buffer);
		                Log.d("IN the thread",t+bytes);
		             
		                
		            } catch (IOException e) {
		            	Log.d("Exception caught", "reading buffer");
		                break;
		            }
		            
		        }
		    }
		 
		    /* Call this from the main activity to send data to the remote device */
		    public void write(byte[] bytes) {
		        try {
		            mmOutStream.write(bytes);
		        } catch (IOException e) { }
		    }
		 
		    /* Call this from the main activity to shutdown the connection */
		    public void cancel() {
		        try {
		            mmSocket.close();
		        } catch (IOException e) { }
		    }
		}
   }
  


