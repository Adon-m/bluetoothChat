package com.example.bluetoothclient;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Set;
import java.util.UUID;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.TextView;


public class MainActivity extends Activity {

    public static final  UUID MY_UUID = UUID.fromString("d1740d40-af75-45e7-8424-0aa52c31ec45");
	private static final int REQUEST_ENABLE_BT = 0;
    BluetoothAdapter mBluetoothAdapter=BluetoothAdapter.getDefaultAdapter();
   TextView textView =null;
    EditText text;
	public Handler mHandler;
	 BluetoothDevice mDevice;
     boolean started=false;;
	@Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
       textView = (TextView) findViewById(R.id.textView1 );
       text = (EditText)findViewById(R.id.editText1);
        if (!mBluetoothAdapter.isEnabled()) {
            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
        }
		
		
        Set<BluetoothDevice> pairedDevices = mBluetoothAdapter.getBondedDevices();
     // If there are paired devices
     if (pairedDevices.size() > 0) {
         // Loop through paired devices
    	
         for (BluetoothDevice device : pairedDevices) {
           
			// Add the name and address to an array adapter to show in a ListView
        	 if(device.getName().equals("Tab")){
        		mDevice=device;
        	 }
            textView.setText(textView.getText()+(device.getName() + "\n" + device.getAddress()));
         }
         if(mDevice==null){
             discovery();
             }
         
     }
     mHandler = new Handler(){
 		@Override
 		  public void handleMessage(Message msg) {
 			//Bundle bundle = msg.getData();
 			
 			//String info = (String)msg.obj;
 			 String t = new String(msg.obj.toString());
 			  textView.setText( t);
 			  
 			  super.handleMessage(msg);
 			  
 		}
 	};
      
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
    
    //This function is for discovering new devices that are not paired
    public void discovery(){
    	mBluetoothAdapter.startDiscovery();
    	 final BroadcastReceiver mReceiver = new BroadcastReceiver() {
    	    @SuppressLint("NewApi") public void onReceive(Context context, Intent intent) {
    	    	
    	        String action = intent.getAction();
    	        // When discovery finds a device
    	        if (BluetoothDevice.ACTION_FOUND.equals(action)) {
    	            // Get the BluetoothDevice object from the Intent
    	            BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
    	            // Add the name and address to an array adapter to show in a ListView
    	            textView.setText(textView.getText()+"Discovered"+device.getName() + "\n" + device.getAddress()+"\n"+device.getUuids());
    	            if(device.getAddress().equals("34:BE:00:6E:91:C4")){
    	        		mDevice=device;
    	            }
    	        }
    	    }
    	};
    	// Register the BroadcastReceiver
    	IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
    	registerReceiver(mReceiver, filter); // Don't forget to unregister during onDestroy
    }
    public void send(View v){
    	
    	 ConnectThread conn = new ConnectThread(mDevice);
    	if(mDevice.getAddress().equals("34:BE:00:6E:91:C4")){
    	conn.start();
    	}
    	else {}
    	conn.interrupt();
    	conn=null;
    	textView.setText(mDevice.getAddress());
    }
    
    private class ConnectThread extends Thread {
        private final BluetoothSocket mmSocket;
        private final BluetoothDevice mmDevice;
     
        public ConnectThread(BluetoothDevice device) {
            // Use a temporary object that is later assigned to mmSocket,
            // because mmSocket is final
            BluetoothSocket tmp = null;
            mmDevice = device;
     
            // Get a BluetoothSocket to connect with the given BluetoothDevice
            try {
                // MY_UUID is the app's UUID string, also used by the server code
                tmp = device.createRfcommSocketToServiceRecord(MY_UUID);
            } catch (IOException e) { }
            mmSocket = tmp;
        }
    
        public void run() {
            // Cancel discovery because it will slow down the connection
            mBluetoothAdapter.cancelDiscovery();
     
            try {
                // Connect the device through the socket. This will block
                // until it succeeds or throws an exception
                mmSocket.connect();
            } catch (IOException connectException) {
                // Unable to connect; close the socket and get out
                try {
                    mmSocket.close();
                } catch (IOException closeException) { }
                return;
            }
     
            // Do work to manage the connection (in a separate thread)
            manageConnectedSocket(mmSocket);
        }
        public void callManager(){
       	 manageConnectedSocket(mmSocket);
        }
     
        /** Will cancel an in-progress connection, and close the socket */
        public void cancel() {
            try {
                mmSocket.close();
            } catch (IOException e) { }
        }
    }
    public void manageConnectedSocket(BluetoothSocket mSocket){
    	ConnectedThread connect = new ConnectedThread(mSocket);
    	byte [] buffer=  text.getText().toString().getBytes();
    	connect.start();
    	connect.write(buffer);
    	//connect.cancel();
    }
    
    private class ConnectedThread extends Thread {
        private static final int MESSAGE_READ = 1;
		private final BluetoothSocket mmSocket;
        private final InputStream mmInStream;
        private final OutputStream mmOutStream;
     
        public ConnectedThread(BluetoothSocket socket) {
            mmSocket = socket;
            InputStream tmpIn = null;
            OutputStream tmpOut = null;
     
            // Get the input and output streams, using temp objects because
            // member streams are final
            try {
                tmpIn = socket.getInputStream();
                tmpOut = socket.getOutputStream();
            } catch (IOException e) { }
     
            mmInStream = tmpIn;
            mmOutStream = tmpOut;
        }
     
        public void run() {
            byte[] buffer = new byte[1024];  // buffer store for the stream
            int bytes; // bytes returned from read()
           
            // Keep listening to the InputStream until an exception occurs
            
            while (true) {
                try {
                	
                    // Read from the InputStream
                    bytes = mmInStream.read(buffer);
                    // Send the obtained bytes to the UI activity
                    if(bytes>0){
                    mHandler.obtainMessage(MESSAGE_READ, bytes, -1, buffer)
                            .sendToTarget();
                	}
                    
                } catch (IOException e) {
                    break;
                }
            }
        }
     
        /* Call this from the main activity to send data to the remote device */
        public void write(byte[] bytes) {
            try {
                mmOutStream.write(bytes);
            } catch (IOException e) { }
        }
     
        /* Call this from the main activity to shutdown the connection */
        public void cancel() {
            try {
                mmSocket.close();
            } catch (IOException e) { }
        }
    }
}
