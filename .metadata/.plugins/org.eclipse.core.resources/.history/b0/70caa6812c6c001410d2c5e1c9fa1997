package com.example.bluetoothchat;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Set;
import java.util.UUID;

//import com.example.bluetoothclient.MainActivity.ConnectThread;
//import com.example.bluetoothserver.MainActivity.ConnectedThread;



import android.annotation.SuppressLint;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothServerSocket;
import android.bluetooth.BluetoothSocket;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.TextView;


public class BluetoothChatActivity extends Activity {
	
	//Global Vars
	public static final  UUID MY_UUID = UUID.fromString("d1740d40-af75-45e7-8424-0aa52c31ec45");
	public static final String NAME = "BluetoothChat";
	private static final int REQUEST_ENABLE_BT = 0;
	private static String MAC_ADD="30:A8:DB:62:84:A5";//Xperia
	//private static String MAC_ADD="34:BE:00:6E:91:C4";//tab
	BluetoothAdapter mBluetoothAdapter=BluetoothAdapter.getDefaultAdapter();
	BluetoothSocket socket = null;
	BluetoothDevice mDevice;
	public Handler mHandler;
	TextView text;
	EditText edit;
	ConnectedThread clientConnect;
	ConnectedThread serverConnect;
	 AcceptThread accept;
	
	
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_bluetooth_chat);
        text = (TextView)findViewById(R.id.messagesTextView);
        edit = (EditText)findViewById(R.id.inputEditText);
        
        //setup the server to recieve requests
        serverSocketSetup();
        
        

        
        
        mHandler = new Handler(){
     		@Override
     		  
     		//This handler recieves values from the connected thread and anytime there is new text it updates the textview
     		public void handleMessage(Message msg) {
     			
     			//String info = (String)msg.obj;
     			 String t = new String(msg.obj.toString());
     			  text.setText( t);
     			  
     			  super.handleMessage(msg);
     			  
     		}
     	};
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.bluetooth_chat, menu);
        
        
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
    public void discovery(){
    	mBluetoothAdapter.startDiscovery();
    	 final BroadcastReceiver mReceiver = new BroadcastReceiver() {
    	    @SuppressLint("NewApi") public void onReceive(Context context, Intent intent) {
    	    	
    	        String action = intent.getAction();
    	        // When discovery finds a device
    	        if (BluetoothDevice.ACTION_FOUND.equals(action)) {
    	            // Get the BluetoothDevice object from the Intent
    	            BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
    	            // Add the name and address to an array adapter to show in a ListView
    	            text.setText(text.getText()+"Discovered"+device.getName() + "\n" + device.getAddress()+"\n"+device.getUuids());
    	            if(device.getAddress().equals(MAC_ADD)){
    	        		mDevice=device;
    	            }
    	        }
    	    }
    	};
    	// Register the BroadcastReceiver
    	IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
    	registerReceiver(mReceiver, filter); // Don't forget to unregister during onDestroy
    }
    
    
    public void send(View v){
    	accept.cancel();
    	if(!(socket==null)){
    		byte [] buffer=  edit.getText().toString().getBytes();
    		serverConnect.write(buffer);
    		text.setText(text.getText()+"iin");
    	}
    	else{
    		Set<BluetoothDevice> pairedDevices = mBluetoothAdapter.getBondedDevices();
    	     // If there are paired devices
    	     if (pairedDevices.size() > 0) {
    	         // Loop through paired devices
    	    	
    	         for (BluetoothDevice device : pairedDevices) {
    	           
    				// Add the name and address to an array adapter to show in a ListView
    	        	 if(device.getAddress().equals(MAC_ADD)){
    	        		mDevice=device;
    	        	 }
    	            text.setText(text.getText()+(device.getName() + "\n" + device.getAddress()));
    	         }
    	         if(mDevice==null){
    	             discovery();
    	             }
    	         
    	     
    	     }
    	     if (mDevice!=null){
    	    	 ConnectThread conn = new ConnectThread(mDevice);
    	        	
    	         
    	        	conn.start();
    	        	text.setText(text.getText()+"start");
    	        	
    	        	
    	     }
    	     else{
    	    	 
    	    	 text.setText(text.getText()+"prolem");
    	     }
        	//conn.interrupt();
        	//conn=null;
    	}
    }
    
    
    
    //This section sets this device as the client 
    private class ConnectThread extends Thread {
        //private final BluetoothSocket mmSocket;
        private final BluetoothDevice mmDevice;
     
        public ConnectThread(BluetoothDevice device) {
            // Use a temporary object that is later assigned to mmSocket,
            // because mmSocket is final
            BluetoothSocket tmp = null;
            mmDevice = device;
     
            // Get a BluetoothSocket to connect with the given BluetoothDevice
            try {
                // MY_UUID is the app's UUID string, also used by the server code
                tmp = device.createRfcommSocketToServiceRecord(MY_UUID);
            } catch (IOException e) { }
            socket = tmp;
        }
    
        public void run() {
            // Cancel discovery because it will slow down the connection
            mBluetoothAdapter.cancelDiscovery();
     
            try {
                // Connect the device through the socket. This will block
                // until it succeeds or throws an exception
                socket.connect();
            } catch (IOException connectException) {
                // Unable to connect; close the socket and get out
                try {
                    socket.close();
                } catch (IOException closeException) { }
                return;
            }
     
            // Do work to manage the connection (in a separate thread)
           clientConnect= new ConnectedThread(socket);
           clientConnect.start();
           byte [] buffer=  edit.getText().toString().getBytes();
   			clientConnect.write(buffer);
        }
        
     
        /** Will cancel an in-progress connection, and close the socket */
        public void cancel() {
            try {
                socket.close();
            } catch (IOException e) { }
        }
    }
//Initialize the server listening function
    public void serverSocketSetup(){
  	  // int c=0/0;
  	   if(BluetoothAdapter.getDefaultAdapter().isEnabled()==true){
  		   accept = new AcceptThread();
  		   accept.start();
  	   }
  	   else{ Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
  	    startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
  	   }
     }

    
 // This connects it as a server
 	class AcceptThread extends Thread {
 	    private final BluetoothServerSocket mmServerSocket;
 	 
 	    public AcceptThread() {
 	        // Use a temporary object that is later assigned to mmServerSocket,
 	        // because mmServerSocket is final
 	        BluetoothServerSocket tmp = null;
 	        
 	        try {
 	            // MY_UUID is the app's UUID string, also used by the client code
 	        	Log.d("Start", " starting to listen");
 	            tmp = mBluetoothAdapter.listenUsingRfcommWithServiceRecord(NAME, MY_UUID);
 	            Log.d("Finish", " starting to listen");
 	        } catch (IOException e) {
 	        	Log.d("AcceptThread", "get rfcom channel failed");
 	        	
 	        }

 	        mmServerSocket = tmp;
 	    }
 	 
 	    public void run() {
 	    	 socket = null;
 	        // Keep listening until exception occurs or a socket is returned
 	        while (true) {
 	            try {
 	            	Log.d("run", "Running run");
 	                socket = mmServerSocket.accept();
 	                Log.d("Socket", "SOcket:"+socket.toString());
 	                
 	            } catch (IOException e) {
 	            	Log.d("ACCept", "socket failed to initialize accept");
 	                break;
 	            }
 	            // If a connection was accepted
 	            if (socket != null) {
 	                // Do work to manage the connection (in a separate thread)
 	            	serverConnect= new ConnectedThread(socket);
 	                serverConnect.start();
 	               byte [] buffer=  edit.getText().toString().getBytes();
   	    	serverConnect.write(buffer);
 	               
 	            }
 	        }
 	    }
 	 
 	    /** Will cancel the listening socket, and cause the thread to finish */
 	    public void cancel() {
 	        try {
 	            mmServerSocket.close();
 	        } catch (IOException e) { }
 	    }
 	}

 	
 	
	
	
	private class ConnectedThread extends Thread {
        private static final int MESSAGE_READ = 1;
		private final BluetoothSocket mmSocket;
        private final InputStream mmInStream;
        private final OutputStream mmOutStream;
     
        public ConnectedThread(BluetoothSocket socket) {
            mmSocket = socket;
            InputStream tmpIn = null;
            OutputStream tmpOut = null;
     
            // Get the input and output streams, using temp objects because
            // member streams are final
            try {
                tmpIn = socket.getInputStream();
                tmpOut = socket.getOutputStream();
            } catch (IOException e) { }
     
            mmInStream = tmpIn;
            mmOutStream = tmpOut;
        }
     
        public void run() {
           
            // Keep listening to the InputStream until an exception occurs
            
            while (true) {
            	  byte[] buffer = new byte[1024];  // buffer store for the stream
                  int bytes; // bytes returned from read()
                 
                  // Keep listening to the InputStream until an exception occurs
                try {
                	
                    // Read from the InputStream
                    bytes = mmInStream.read(buffer);
                    // Send the obtained bytes to the UI activity
                    String t = new String(buffer,0,bytes, "UTF-8");
                    mHandler.obtainMessage(MESSAGE_READ, bytes, -1, t)
                            .sendToTarget();
                    Log.d("IN the thread",t+bytes);
                    
                } catch (IOException e) {
                    break;
                }
            }
        }
     
        /* Call this from the main activity to send data to the remote device */
        public void write(byte[] bytes) {
            try {
                mmOutStream.write(bytes);
            } catch (IOException e) { }
        }
     
        /* Call this from the main activity to shutdown the connection */
        public void cancel() {
            try {
                mmSocket.close();
            } catch (IOException e) { }
        }
    }
	
	
	
	
    
}
